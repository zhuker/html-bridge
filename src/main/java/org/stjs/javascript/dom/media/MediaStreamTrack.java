package org.stjs.javascript.dom.media;

import org.stjs.javascript.Map;
import org.stjs.javascript.dom.DOMEvent;
import org.stjs.javascript.functions.Callback1;

public class MediaStreamTrack {
    /**
     * A Boolean value with a value of true if the track is enabled, that is
     * allowed to render the media source stream; or false if it is disabled,
     * that is not rendering the media source stream but silence and blackness.
     * If the track has been disconnected, this value can be changed but has no
     * more effect.
     */
    public boolean enabled;
    /**
     * Read only Returns a DOMString containing a unique identifier (GUID) for
     * the track; it is generated by the browser.
     */
    public String id;
    /**
     * Read only Returns a DOMString set to "audio" if the track is an audio
     * track and to "video", if it is a video track. It doesn't change if the
     * track is deassociated from its source.
     */
    public String kind;
    /**
     * Read only Returns a DOMString containing a user agent-assigned label that
     * identifies the track source, as in "internal microphone". The string may
     * be left empty and is empty as long as no source has been connected. When
     * the track is deassociated from its source, the label is not changed.
     */
    public String label;
    /**
     * Read only Returns a Boolean value indicating whether the track is muted.
     */
    public boolean muted;
    /**
     * Read only Returns a Boolean value with a value of true if the track is
     * readonly (such a video file source or a camera that settings can't be
     * modified),false otherwise.
     */
    public boolean readonly;
    /**
     * Read only Returns an enumerated value giving the status of the track.
     * This will be one of the following values: "live" which indicates that an
     * input is connected and does its best-effort in providing real-time data.
     * In that case, the output of data can be switched on or off using the
     * MediaStreamTrack.enabled attribute. "ended" which indicates that the
     * input is not giving any more data and will never provide new data.
     */
    public String readyState;
    /**
     * Read only Returns a Boolean with a value of true if the track is sourced
     * by a RTCPeerConnection, false otherwise.
     */
    public boolean remote;

    /**
     * Is a EventHandler containing the action to perform when an started event
     * is fired on the object, that is when a new MediaStreamTrack object is
     * added.
     */
    public Callback1<DOMEvent> onstarted;
    /**
     * Is a EventHandler containing the action to perform when an mute event is
     * fired on the object, that is when the streaming is terminating.
     */
    public Callback1<DOMEvent> onmute;
    /**
     * Is a EventHandler containing the action to perform when an unmute event
     * is fired on the object, that is when a MediaStreamTrack object is removed
     * from it.
     */
    public Callback1<DOMEvent> onunmute;
    /**
     * Is a EventHandler containing the action to perform when an
     * overconstrained event is fired on the object, that is when a
     * MediaStreamTrack object is removed from it.
     */
    public Callback1<DOMEvent> onoverconstrained;
    /**
     * Is a EventHandler containing the action to perform when an ended event is
     * fired on the object, that is when a MediaStreamTrack object is removed
     * from it.
     */
    public Callback1<DOMEvent> onended;

    /**
     * Lets the application specify the ideal and/or ranges of acceptable values
     * for any number of the available constrainable properties of the
     * MediaStreamTrack.
     */
    public void applyConstraints() {
    }

    /** Returns a duplicate of the MediaStreamTrack. */
    public MediaStreamTrack clone() {
        return null;
    }

    /**
     * Returns the a list of constrainable properties available for the
     * MediaStreamTrack.
     */
    public Map<String, Object> getCapabilities() {
        return null;
    }

    /**
     * Returns a MediaTrackConstraints object containing the currently set
     * constraints for the track; the returned value matches the constraints
     * last set using applyConstraints().
     */
    public MediaTrackConstraints getConstraints() {
        return null;
    }

    /**
     * Returns a MediaTrackSettings object containing the current values of each
     * of the MediaStreamTrack's constrainable properties.
     */
    public MediaTrackSettings getSettings() {
        return null;
    }

    /**
     * Stops playing the source associated to the track, both the source and the
     * track are deassociated. The track state is set to ended.
     */
    public void stop() {
    }

}
